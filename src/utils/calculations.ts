export interface DistributeRewardsParams {
  dailyReward: number;
  tasksNeeded: number;
  tasksCompleted: number;
  earnedSoFar: number;
  productPrices: number[];
}

export function distributeRewards({
  dailyReward,
  tasksNeeded,
  tasksCompleted,
  earnedSoFar,
  productPrices,
}: DistributeRewardsParams): number[] {
  const payments: number[] = [];

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∏, —è–∫–∞ –º–∞—î –±—É—Ç–∏ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∑–∞ –¥–µ–Ω—å
  console.log("üü™ –©–æ–¥–µ–Ω–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞:", dailyReward);

  // –í–∏—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—É–º—É, —è–∫–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤–∂–µ –∑–∞—Ä–æ–±–ª–µ–Ω–∏—Ö –∫–æ—à—Ç—ñ–≤
  let remainingDailyReward = dailyReward - earnedSoFar;
  console.log(
    "üü™ –ó–∞–ª–∏—à–æ–∫ —â–æ–¥–µ–Ω–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:",
    dailyReward,
    " - ",
    earnedSoFar,
    " = ",
    remainingDailyReward,
  );

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É
  if (remainingDailyReward < 0) {
    remainingDailyReward = 0;
  }

  const remainingTasks = tasksNeeded - tasksCompleted;
  const remainingPrices = productPrices.slice(tasksCompleted);
  const totalRemainingPrice = remainingPrices.reduce(
    (sum, price) => sum + price,
    0,
  );

  // –ë–∞–∑–æ–≤–∞ —Å—Ç–∞–≤–∫–∞ –∑–∞ –∑–∞–≤–¥–∞–Ω–Ω—è (50% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏)
  const baseRewardPerTask = (remainingDailyReward * 0.5) / remainingTasks;

  // –í—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É (50% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏)
  const priceBasedRewardTotal = remainingDailyReward * 0.5;

  remainingPrices.forEach((price) => {
    const priceBasedReward = (price / totalRemainingPrice) *
      priceBasedRewardTotal;
    const totalRewardForTask = baseRewardPerTask + priceBasedReward;
    payments.push(totalRewardForTask);
  });

  console.log("üü™ –í–∏–≤—ñ–¥ –∑–∞ –∑–∞–≤–¥–∞–Ω–Ω—è:", payments);

  return payments;
}

export function calculateDailyReward(
  balance: number,
  monthlyPercent: number,
): number {
  const daysInMonth = new Date(
    new Date().getFullYear(),
    new Date().getMonth() + 1,
    0,
  ).getDate();
  const dailyPercent = Math.pow(1 + monthlyPercent, 1 / daysInMonth) - 1;
  const dailyReward = balance * dailyPercent;

  console.log("üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —â–æ–¥–µ–Ω–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏:");
  console.log(`–ë–∞–ª–∞–Ω—Å: ${balance.toFixed(2)} TON`);
  console.log(`–ú—ñ—Å—è—á–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫: ${(monthlyPercent * 100).toFixed(2)}%`);
  console.log(`–î–Ω—ñ–≤ —É –º—ñ—Å—è—Ü—ñ: ${daysInMonth}`);
  console.log(`–©–æ–¥–µ–Ω–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫: ${(dailyPercent * 100).toFixed(6)}%`);
  console.log(`–©–æ–¥–µ–Ω–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: ${dailyReward.toFixed(6)} TON`);

  return dailyReward;
}

export function calculateMonthlyProfit(
  initialBalance: number,
  monthlyPercent: number,
): number {
  const daysInMonth = new Date(
    new Date().getFullYear(),
    new Date().getMonth() + 1,
    0,
  ).getDate();
  const dailyRate = Math.pow(1 + monthlyPercent, 1 / daysInMonth) - 1;

  let currentBalance = initialBalance;

  console.log("üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º—ñ—Å—è—á–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É –∑—ñ —Å–∫–ª–∞–¥–Ω–∏–º –≤—ñ–¥—Å–æ—Ç–∫–æ–º:");
  console.log(`–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: ${initialBalance.toFixed(2)} TON`);
  console.log(`–ú—ñ—Å—è—á–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫: ${(monthlyPercent * 100).toFixed(2)}%`);
  console.log(`–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —É –º—ñ—Å—è—Ü—ñ: ${daysInMonth}`);
  console.log(`–©–æ–¥–µ–Ω–Ω–∞ —Å—Ç–∞–≤–∫–∞: ${(dailyRate * 100).toFixed(6)}%`);

  for (let day = 1; day <= daysInMonth; day++) {
    const dailyProfit = currentBalance * dailyRate;
    currentBalance += dailyProfit;
    console.log(
      `–î–µ–Ω—å ${day}: ${currentBalance.toFixed(2)} TON (+${
        dailyProfit.toFixed(6)
      } TON)`,
    );
  }

  const totalProfit = currentBalance - initialBalance;
  const effectiveMonthlyRate = (currentBalance / initialBalance - 1) * 100;

  console.log(`–ö—ñ–Ω—Ü–µ–≤–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance.toFixed(2)} TON`);
  console.log(`–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥: ${totalProfit.toFixed(2)} TON`);
  console.log(`–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –º—ñ—Å—è—á–Ω–∞ —Å—Ç–∞–≤–∫–∞: ${effectiveMonthlyRate.toFixed(2)}%`);

  return totalProfit;
}
